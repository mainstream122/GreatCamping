package com.ktds.camp.member.web;

import java.util.Properties;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ktds.camp.common.EmailCertUtil;
import com.ktds.camp.member.service.MemberService;
import com.ktds.camp.member.vo.MemberVO;

@Controller
public class MemberController {

	private MemberService memberService;
	
	public void setMemberService(MemberService memberService) {
		this.memberService = memberService;
	}
	
	@RequestMapping("/member/signUp")
	public String viewSignUp() {
		return "member/signUp";
	}
	
	@RequestMapping("/member/dosignUp")
	@ResponseBody
	public String dosignUp(MemberVO memberVO) {
		
		if(!memberService.createNewMember(memberVO)) {
			return "false";
		}
		return "isSuccess";
		
	}
	
	@RequestMapping("/member/checkId")
	@ResponseBody
	public String doCheckId(MemberVO memberVO) {
		if(memberService.readCountMember(memberVO) > 0) {
			return "false";
		}
		return "idSuccess";
	}
	
	@RequestMapping("/member/checkNickname")
	@ResponseBody
	public String doCheckNickname(MemberVO memberVO) {
		if(memberService.readCountMember(memberVO) > 0) {
			return "false";
		}
		
		return "nicknameSuccess";
	}
	
	@RequestMapping("/member/idpwFind")
	public String doIdpwFind() {
		return "member/idpwFind";
	}
	
	
	
	@RequestMapping("/member/emailCert")
	@ResponseBody
	public String emailCert(MemberVO memberVO, HttpServletRequest request) throws AddressException, MessagingException {
		if(memberService.readCountMember(memberVO) == 3) {
			return "OutOfRange";
		}
		return EmailCertUtil.doEmailCert(memberVO.getMemberEmail(), request);	
	}
	
	@RequestMapping("/login/login")
	public String viewLoginPage() {
		return "login/login";
	} 
	
	@RequestMapping("/login/dologin")
	@ResponseBody
	public String doLogin(MemberVO memberVO, HttpSession session) {
		MemberVO resoultVO = memberService.readOneMember(memberVO);
		if(resoultVO != null) {
			session.setAttribute("_USER_", resoultVO);
			return "isSuccess";
		}
		return "false";
	}
	
}
